

# This file was *autogenerated* from the file exploit3.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF = Integer(0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF); _sage_const_3 = Integer(3); _sage_const_0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B = Integer(0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_10000 = Integer(10000); _sage_const_2 = Integer(2); _sage_const_5 = Integer(5); _sage_const_4444 = Integer(4444)

p = _sage_const_0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF 
a = -_sage_const_3 
b = _sage_const_0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B 

import random
import socket

def recv_until_newline(sock):

    data = b""
    while True:
        chunk = sock.recv(_sage_const_1 )  
        if not chunk:
            break  
        data += chunk
        if b'\n' in chunk:
            break 
    return data.decode()

E = EllipticCurve(GF(p), [a, b])

def random_curve(E):
    b_prime = random.randint(_sage_const_1 ,p)
    E_prime = EllipticCurve(GF(p), [a, b_prime])
    return E_prime, b_prime

def count_points_on_curve(E_prime):
    n_prime = E_prime.cardinality()
    return n_prime

def find_small_factors(n_prime, used_factors):
    factors = factor(n_prime)  
    small_factors = [f[_sage_const_0 ] for f in factors if f[_sage_const_0 ] < _sage_const_10000  and f[_sage_const_0 ] not in used_factors]  
    return small_factors

def find_low_order_point(E_prime, n_prime, q):
    while True:
        H = E_prime.random_point()  
        R = (n_prime // q) * H 
        if R.order() == q:  
            print(f"Point R found with order {q}:")
            print(R)
            print(f"{hex(R[_sage_const_0 ])[_sage_const_2 :]}:{hex(R[_sage_const_1 ])[_sage_const_2 :]}")
            return R

def main():
    print(f"Using the base curve P-256: {E}")

    
    used_factors = set([_sage_const_2 ,_sage_const_3 ,_sage_const_5 ])  
    
    primes = []
    dlogs = []

    while True:
        E_prime, b_prime = random_curve(E)
        print(f"Generated random curve E': y^2 = x^3 + {a}x + {b_prime}")
        
        n_prime = count_points_on_curve(E_prime)
        print(f"n' (number of points on E'): {n_prime}")
        
        small_factors = find_small_factors(n_prime, used_factors)
        if not small_factors:
            print("No unused small factors found. Trying another curve...")
            continue  
        q = small_factors[_sage_const_0 ]
        print(f"Small factor found: q = {q}")
        

        
        R = find_low_order_point(E_prime, n_prime, q)

        

        try:
            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_address = ('127.0.0.1', _sage_const_4444 ) 
            client_socket.connect(server_address)

            recv_until_newline(client_socket)
            sleep(_sage_const_1 )
            message = f"{hex(R[_sage_const_0 ])[_sage_const_2 :]}:{hex(R[_sage_const_1 ])[_sage_const_2 :]}"
            client_socket.send(message.encode())
            sleep(_sage_const_1 )
            scalarX = Integer(recv_until_newline(client_socket))

            client_socket.close()

            S_arr = E_prime.lift_x(scalarX, all=True)
            for S in S_arr:
                try:
                    k = R.discrete_log(S)
                    print(f"k: {k}, q: {q}")
                    used_factors.add(q)
                except:
                    print('bad')
            
            
            #primes.append(q)
            #dlogs.append(k)
            
            #print(primes)
            #print(dlogs)
            #key  = CRT_list(dlogs, primes)

            #print(hex(key))
            
        except:
            print('Oh no')



main()

